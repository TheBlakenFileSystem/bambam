package main

import (
	"fmt"
	"os"
	"reflect"
    "bytes"
	"github.com/shurcooL/go-goon"
)

// used in rw_test.go for round-trip testing write/read

type RWTest struct {
	Hello    []string
	World    []int
	SixFour  []int64
	Floaters []float64
}

func main() {
	rw := RWTest{
		Hello:    []string{"one", "two", "three"},
		World:    []int{1, 2, 3},
		SixFour:  []int64{6, 5, 4},
		Floaters: []float64{1.5, 4.5},
	}

	var o bytes.Buffer
	rw.Save(&o)

    rw2 := &RWTest{}
	rw2.Load(&o)

	if !reflect.DeepEqual(&rw, rw2) {
		fmt.Printf("rw and rw2 were not equal!\n")

		fmt.Printf("\n\n =============  rw: ====\n")
		goon.Dump(rw)
		fmt.Printf("\n\n =============  rw2: ====\n")
		goon.Dump(rw2)
		fmt.Printf("\n\n ================\n")

		os.Exit(1)
	}

	fmt.Printf("Load() data matched Saved() data.\n")
}
